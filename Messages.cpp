
#include "actor/Messages.h"
#include "actor/IActor.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief NotType::NotType
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
NotType::NotType(){}

NotType::~NotType(){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief TAbstractMessage::TAbstractMessage
///
TAbstractMessage::TAbstractMessage(){}

TAbstractMessage::~TAbstractMessage(){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief TMessage::TMessage
/// \param message комманда
/// \param typeMessage тип сообщения
/// \param data данные
/// \param senders отправители
/*template<typename Data>
TMessage<Data>::TMessage(Command message, TypeMessage typeMessage, Data data, std::list<std::shared_ptr<IActor> > senders):_message(message),_typeMessage(typeMessage),_data(data),_senders(senders){}

template<typename Data>
TMessage<Data>::TMessage(Command message, TypeMessage typeMessage, std::list<std::shared_ptr<IActor> > senders):_message(message),_typeMessage(typeMessage),_data(NotType()), _senders(senders){}

template<typename Data>
TMessage<Data>::~TMessage(){}

template<typename Data>
boost::any TMessage<Data>::getData() const{boost::any data=_data; return data;}

template<typename Data>
Command TMessage<Data>::getMessage() const{return _message;}

template<typename Data>
TypeMessage TMessage<Data>::getType() const {return _typeMessage;}

template<typename Data>
std::list<std::shared_ptr<IActor> > TMessage<Data>::getSenders() const	{assert(_senders.size()!=0);return _senders;	}
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

